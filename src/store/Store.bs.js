// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Debug = require("bs-platform/lib/js/belt_Debug.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Common$ReactHooksTemplate = require("../Common.bs.js");
var ApiClient$ReactHooksTemplate = require("./ApiClient.bs.js");

Belt_Debug.setupChromeDebugger(/* () */0);

var reactContext = React.createContext(undefined);

function Store$ResourceContext$Provider(Props) {
  var children = Props.children;
  var match = React.useState((function () {
          return /* NotAsked */0;
        }));
  var setResourceState = match[1];
  var resourceState = match[0];
  var fetchResources = function (param) {
    Curry._1(setResourceState, (function (param) {
            return /* Loading */1;
          }));
    ApiClient$ReactHooksTemplate.buildResources(/* () */0).then((function (result) {
            if (result.tag) {
              var message = result[0];
              Curry._1(setResourceState, (function (param) {
                      return /* LoadFailure */Block.variant("LoadFailure", 0, [message]);
                    }));
            } else {
              var resources = result[0];
              console.log("Built resources...");
              Curry._1(setResourceState, (function (param) {
                      return /* LoadSuccess */Block.variant("LoadSuccess", 1, [resources]);
                    }));
            }
            return Promise.resolve(/* () */0);
          }));
    return /* () */0;
  };
  var getResource = function (resourceName) {
    if (typeof resourceState === "number" || resourceState.tag !== 1) {
      return undefined;
    } else {
      return Belt_Option.flatMap(resourceState[0], (function (rlist) {
                    return Belt_Array.getBy(rlist, (function (resource) {
                                  return resource[/* name */1] === resourceName;
                                }));
                  }));
    }
  };
  React.useEffect((function () {
          console.log("Initial fetch...");
          fetchResources(/* () */0);
          return (function (param) {
                    console.log("cleanup Effect");
                    return /* () */0;
                  });
        }), ([]));
  var it = /* record */Block.record([
      "resourceState",
      "fetchResources",
      "getResource"
    ], [
      resourceState,
      fetchResources,
      getResource
    ]);
  var ctx = React.useMemo((function () {
          return it;
        }), /* array */[resourceState]);
  return Common$ReactHooksTemplate.reactContextProvider(children, reactContext, ctx);
}

var Provider = /* module */Block.localModule(["make"], [Store$ResourceContext$Provider]);

var ResourceContextNotFound = Caml_exceptions.create("Store-ReactHooksTemplate.ResourceContext.ResourceContextNotFound");

function useResources(param) {
  var match = React.useContext(reactContext);
  if (match !== undefined) {
    return match;
  } else {
    throw ResourceContextNotFound;
  }
}

var ResourceContext = /* module */Block.localModule([
    "reactContext",
    "Provider",
    "ResourceContextNotFound",
    "useResources"
  ], [
    reactContext,
    Provider,
    ResourceContextNotFound,
    useResources
  ]);

var debug_mode = false;

exports.debug_mode = debug_mode;
exports.ResourceContext = ResourceContext;
/*  Not a pure module */
